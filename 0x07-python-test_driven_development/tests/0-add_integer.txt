The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``tests/0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(7, 3)
    10

    >>> add_integer(5, -3)
    2

    >>> add_integer(2.1, 3.0)
    5

    >>> add_integer(2.9, 4.2)
    8

    >>> add_integer(-4.8, -0.2)
    -4

    >>> add_integer(2.5, -3)
    -1

    >>> add_integer(2)
    100

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
    
    >>> add_integer("hel", 7)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(9, "bbb")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hel", "bbbb")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
