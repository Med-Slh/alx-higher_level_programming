The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``tests/0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(1, 2)
    3
    
    >>> add_integer(100, -2)
     98
    
    >>> add_integer(2)
    100
    
    >>> add_integer(10.3, 6.5)
    16
    
    >>> add_integer(10, 3.5)
    13
    
    >>> add_integer("a", 2)
    Traceback (most recent call last):
    TypeError: a must be an integer
    
    >>> add_integer(2, "bbb")
    Traceback (most recent call last):
    TypeError: b must be an integer
    
    >>> add_integer(2.5, "bbb")
    Traceback (most recent call last):
    TypeError: b must be an integer
    
    >>> add_integer("hel", 7)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(9, "bbb")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("hel", "bbbb")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
